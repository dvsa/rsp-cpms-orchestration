service: rsp-cpms-orchestration

frameworkVersion: ">=1.1.0 <2.0.0"
custom:
  documentation:
    version: '1'
    title: 'RSP CPMS Orchestration API'
    description: 'Api to handle and orchestrate calls to CPMS from RSP'
plugins:
  - serverless-offline
  - serverless-openapi-documentation
provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - "sqs:SendMessage"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
      Resource: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:CPMS_Launched_Payments
functions:
  cardPayment:
    handler: handler.cardPayment
    memorySize: 128
    events:
      -
        http:
          path: cardPayment
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Create card payment"
            description: "Create card payment transaction and return payment URL"
            requestBody:
              description: "None"
            requestModels:
              application/json: "CardPaymentRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing Transaction ID and payment URL"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be created"
                  responseModels:
                  application/json: "ErrorResponse"
  groupCardPayment:
    handler: handler.groupCardPayment
    memorySize: 128
    events:
      -
        http:
          path: groupCardPayment
          method: post
          authorizer: aws_iam
          cors: true
          # TODO: Update this
          documentation:
            summary: "Create card group payment"
            description: "Create card group payment transaction and return payment URL"
            requestBody:
              description: "None"
            requestModels:
              application/json: "GroupCardPaymentRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing Transaction ID and payment URL"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be created"
                  responseModels:
                  application/json: "ErrorResponse"
  cardNotPresentPayment:
    handler: handler.cardNotPresentPayment
    memorySize: 128
    events:
      -
        http:
          path: cardNotPresentPayment
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Create Card Holder Not Present Payment"
            description: "Create card holder not present payment transaction and return payment URL"
            requestBody:
              description: "None"
            requestModels:
              application/json: "CardPaymentRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing TransactionID and payment URL"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be created"
                responseModels:
                  application/json: "ErrorResponse"
  cashPayment:
    handler: handler.cashPayment
    memorySize: 128
    events:
      -
        http:
          path: cashPayment
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Create Cash Payment"
            description: "Create cash payment transaction and return status"
            requestBody:
              description: "None"
            requestModels:
              application/json: "CashPaymentRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing TransactionID and payment status"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be completed"
                responseModels:
                  application/json: "ErrorResponse"
  chequePayment:
    handler: handler.chequePayment
    memorySize: 128
    events:
      -
        http:
          path: chequePayment
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Create Cheque Payment"
            description: "Create cheque payment transaction and return status"
            requestBody:
              description: "None"
            requestModels:
              application/json: "ChequePaymentRequest"
            methodResponse:
              - statusCode: 200
                responseBody:
                  description: "Body containing TransactionID and payment status"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be completed"
                responseModels:
                  application/json: "ErrorResponse"
  postalOrderPayment:
    handler: handler.postalOrderPayment
    memorySize: 128
    events:
      -
        http:
          path: postalOrderPayment
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Create postal order payment"
            description: "Create postal order payment transaction and return status"
            requestBody:
              description: "None"
            requestModels:
              application/json: "PostalOrderPaymentRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing TransactionID and payment URL"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the transaction could not be created"
                responseModels:
                  application/json: "ErrorResponse"
  confirm:
    handler: handler.confirmPayment
    memorySize: 128
    events:
      -
        http:
          path: confirm
          method: post
          authorizer: aws_iam
          cors: true
          documentation:
            summary: "Confirm a card payment"
            description: "Query CPMS and return the status of a card payment"
            requestBody:
              description: "None"
            requestModels:
              application/json: "ConfirmRequest"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Body containing the payment status"
                  application/json: "PaymentResponse"
              - statusCode: 400
                responseBody:
                  description: "Error message detailing why the status could not be obtained"
                responseModels:
                  application/json: "ErrorResponse"
  listReports:
    handler: handler.listReports
    memorySize: 128
    events:
      -
        http:
          path: listReports
          method: post
          authorizer: aws_iam
          cors: true
  generateReport:
    handler: handler.generateReport
    memorySize: 128
    events:
      -
        http:
          path: generateReport
          method: post
          authorizer: aws_iam
          cors: true
  checkReportStatus:
    handler: handler.checkReportStatus
    memorySize: 128
    events:
      -
        http:
          path: checkReportStatus
          method: post
          authorizer: aws_iam
          cors: true
  reverseCard:
    handler: handler.reverseCard
    memorySize: 128
    events:
      -
        http:
          path: reverseCard
          method: post
          authorizer: aws_iam
          cors: true
  reverseCheque:
    handler: handler.reverseCheque
    memorySize: 128
    events:
      -
        http:
          path: reverseCheque
          method: post
          authorizer: aws_iam
          cors: true
  checkForOrphanedPayments:
    handler: handler.checkForOrphanedPayments
    events:
      - sqs:
          arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:LaunchedPayments

resources:
  Resources:
    LaunchedPayments:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "LaunchedPayments"
        RedrivePolicy:
          deadLetterTargetArn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:DeadLetterLaunchedPayments
          maxReceiveCount: 4
    DeadLetterLaunchedPayments:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "DeadLetterLaunchedPayments"